{"version":3,"file":"components_dashboard_tsx-chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;AC1DA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;ACbA;AAGA;AAIA;;;;;;;;;;;;;;;;;;;AAmBA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA","sources":["webpack:///./components/dashboard.tsx","webpack:///./components/page-heading.tsx","webpack:///./components/status-card.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Helmet } from 'react-helmet';\nimport { RouteComponentProps } from 'react-router';\n\nimport { HorizontalNav } from '@openshift-console/dynamic-plugin-sdk';\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport { StatusCard } from './status-card';\nimport PageHeading from './page-heading';\n\ntype ODFDashboardPageProps = {\n    history: RouteComponentProps['history'];\n  };\n\n  \nconst UpperSection: React.FC = () => (\n  <Grid hasGutter>\n    <GridItem md={8} sm={12}>\n      <StatusCard/>\n    </GridItem>\n  </Grid>\n);\n\nexport const ODFDashboard: React.FC = () => {\n  return (\n    <>\n      <div className=\"co-dashboard-body\">\n        <UpperSection />\n      </div>\n    </>\n  );\n};\n\nconst ODFDashboardPage: React.FC<ODFDashboardPageProps> = (props) => {\n  const { t } = useTranslation('plugin__console-demo');\n  const title = t('OpenShift Data Foundation');\n  const pages = [\n    {\n      href: '',\n      name: t('Overview'),\n      component: ODFDashboard,\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading />\n      <HorizontalNav\n        pages={pages}\n      />\n    </>\n  );\n};\n\nexport default ODFDashboardPage;\n","import * as React from 'react';\nimport * as _ from 'lodash';\n\nconst PageHeading: React.FC = (props) => {\n  return (\n      <h1 className=\"co-m-pane__heading\">\n        <div className=\"co-m-pane__name co-resource-item\">\n          <span className=\"co-m-pane__heading-badge\"> OpenShift Data Foundation </span>\n        </div>\n      </h1>\n  );\n};\n\nexport default PageHeading;\n","import * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n    DashboardCard\n} from '@openshift-console/dynamic-plugin-sdk-internal';\n\n/*import { useTranslation } from 'react-i18next';\n\nimport { Gallery, GalleryItem, pluralize } from '@patternfly/react-core';\n\nimport {\n    DashboardCard,\n    DashboardCardBody,\n    DashboardCardHeader,\n    DashboardCardTitle,\n    HealthBody,\n    HealthItem,\n} from '@openshift-console/dynamic-plugin-sdk-internal';\n\nimport {\n  PrometheusResponse,\n} from '@openshift-console/dynamic-plugin-sdk';\n\nimport { HealthState } from '../utils/constants';\nimport { getAcmThanosEnpoint } from '../utils/query';\nimport { useURLPoll } from './common/use-url-poll-hook'; */\n\n\nexport const StatusCard: React.FC = () => {\n  /*const { t } = useTranslation('plugin__console-demo');\n   const healthStateMap = (state: string) => {\n    switch (state) {\n      case '0':\n        return HealthState.OK;\n      case '1':\n        return HealthState.WARNING;\n      case '2':\n        return HealthState.ERROR;\n      default:\n        return HealthState.LOADING;\n    }\n  };\n\n  const [healthData, healthError, healthLoading] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpoint()}?query=node_network_up`);\n\n  const parsedHealthData =\n  !healthError && !healthLoading\n    ? healthData.data.result.reduce((acc, curr) => {\n        const systemName = curr.metric.storage_system;\n        const systemData = {\n          systemName,\n          rawHealthData: curr.value[1],\n          healthState: healthStateMap(curr.value[1]),\n        };\n        return [...acc, systemData];\n      }, [])\n    : [];\n\nconst healthySystems = parsedHealthData.filter(\n  (item) => item.rawHealthData === '0'\n);\n\nconst unHealthySystems = parsedHealthData.filter(\n    (item) => item.rawHealthData !== '0'\n); */\n\n\n  return (\n      <DashboardCard>sds</DashboardCard>\n   /* <DashboardCard className=\"odfDashboard-card--height\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('Status')}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" hasGutter>\n            <GalleryItem>\n                <HealthItem\n                  title={pluralize(healthySystems.length, 'Storage System')}\n                  state={HealthState.OK}\n                >\n                </HealthItem>\n              </GalleryItem>\n              <GalleryItem>\n                <HealthItem\n                  title={pluralize(unHealthySystems.length, 'Storage System')}\n                  state={HealthState.ERROR}\n                >\n                </HealthItem>\n              </GalleryItem>\n          </Gallery>\n        </HealthBody>\n      </DashboardCardBody>\n    </DashboardCard>*/\n  );\n};\n"],"names":[],"sourceRoot":""}