{"version":3,"file":"components_dashboard_tsx-chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAEA;;;;;;;;;;;;;;;;;;ACjDA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAGA;;;;;;;;;;;;;;;;;AC7CA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA","sources":["webpack:///./components/dashboard.tsx","webpack:///./components/status-card.tsx","webpack:///./utils/poll-hook.tsx","webpack:///./utils/safe-fetch-hook.ts","webpack:///./utils/use-url-poll.ts"],"sourcesContent":["import * as React from 'react';\nimport { HorizontalNav } from '@openshift-console/dynamic-plugin-sdk';\nimport { useTranslation } from 'react-i18next';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { StatusCard } from './status-card';\nimport { RouteComponentProps } from 'react-router';\n\ntype ODFDashboardPageProps = {\n    history: RouteComponentProps['history'];\n  };\n\n  \nconst UpperSection: React.FC = () => (\n  <Grid hasGutter>\n    <GridItem md={8} sm={12}>\n      <StatusCard/>\n    </GridItem>\n  </Grid>\n);\n\nexport const ODFDashboard: React.FC = () => {\n  return (\n    <>\n      <div className=\"co-dashboard-body\">\n        <UpperSection />\n      </div>\n    </>\n  );\n};\n\nconst ODFDashboardPage: React.FC<ODFDashboardPageProps> = (props) => {\n  const { t } = useTranslation('plugin__console-demo');\n  const pages = [\n    {\n      href: '',\n      name: t('Overview'),\n      component: ODFDashboard,\n    },\n  ];\n\n  return (\n    <>\n      <HorizontalNav\n        pages={pages}\n      />\n    </>\n  );\n};\n\nexport default ODFDashboardPage;\n","import * as React from 'react';\nimport {\n  PrometheusResponse\n} from '@openshift-console/dynamic-plugin-sdk';\n\nimport { useURLPoll } from '../utils/use-url-poll';\nimport * as _ from 'lodash';\n\n\nexport const StatusCard: React.FC = () => {\n const healthStateMap = (state: string) => {\n  switch (state) {\n    case '0':\n      return \"OK\";\n    case '1':\n      return \"WARNING\";\n    case '2':\n      return \"ERROR\";\n    default:\n      return \"LOADING\";\n  }\n};\n\n  const [healthData, healthError, healthLoading] = useURLPoll<PrometheusResponse>('/api/proxy/namespace/open-cluster-management-observability/service/observability-thanos-query-new:9099/api/v1/query?query=node_network_up');\n\n  const parsedHealthData =\n  !healthError && !healthLoading\n    ? healthData.data.result.reduce((acc, curr) => {\n        const systemName = curr.metric.storage_system;\n        const systemData = {\n          systemName,\n          rawHealthData: curr.value[1],\n          healthState: healthStateMap(curr.value[1]),\n        };\n        return [...acc, systemData];\n      }, [])\n    : [];\n\nconst healthySystems = parsedHealthData.filter(\n  (item) => item.rawHealthData === '0'\n);\n\n  return (\n    <pre>{JSON.stringify(healthySystems, null, 2)}</pre>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\n// Slightly modified from Dan Abramov's blog post about using React hooks for polling\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const usePoll = (callback, delay, ...dependencies) => {\n  const savedCallback = useRef(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current();\n\n    tick(); // Run first tick immediately.\n\n    if (delay) {\n      // Only start interval if a delay is provided.\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, ...dependencies]);\n};\n","import { useEffect, useRef } from 'react';\nimport { consoleFetchJSON} from '@openshift-console/dynamic-plugin-sdk';\n\nexport const useSafeFetch = () => {\n  const controller = useRef<AbortController>();\n  useEffect(() => {\n    controller.current = new AbortController();\n    return () => controller.current.abort();\n  }, []);\n\n  return (url) => consoleFetchJSON(url, 'get', { signal: controller.current.signal as AbortSignal });\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from 'react';\nimport { usePoll } from './poll-hook';\nimport { useSafeFetch } from './safe-fetch-hook';\n\nexport const URL_POLL_DEFAULT_DELAY = 15000; // 15 seconds\n\nexport const useURLPoll = <R>(\n  url: string,\n  delay = URL_POLL_DEFAULT_DELAY,\n  ...dependencies: any[]\n): URLPoll<R> => {\n  const [error, setError] = useState();\n  const [response, setResponse] = useState<R>();\n  const [loading, setLoading] = useState(true);\n  const safeFetch = useSafeFetch();\n  const tick = useCallback(() => {\n    if (url) {\n      safeFetch(url)\n        .then((data) => {\n          setResponse(data);\n          setError(undefined);\n          setLoading(false);\n        })\n        .catch((err) => {\n          if (err.name !== 'AbortError') {\n            setError(err);\n            setLoading(false);\n            // eslint-disable-next-line no-console\n            console.error(`Error polling URL: ${err}`);\n          }\n        });\n    } else {\n      setLoading(false);\n    }\n  }, [url]);\n\n  usePoll(tick, delay, ...dependencies);\n\n  return [response, error, loading];\n};\n\nexport type URLPoll<R> = [R, any, boolean];\n"],"names":[],"sourceRoot":""}