{"version":3,"file":"exposed-dashboard-chunk.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;;AAIA;AAEA;AAGA;;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AAUA;AACA;AAEA;AAmBA;AAMA;AACA;AAEA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;AACA;AAEA;AACA;AAIA;AACA;AACA;;AAAA;AAGA;AACA;AAMA;AASA;AAKA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAMA;AACA;AAMA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAWA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5PA;AACA;AACA;AACA;AAOA;AACA;AAEA;AAaA;AACA;AACA;AACA;AAIA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAWA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AAMA;AAEA;;;;;;;;;;;;;;;;;;AChGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzBA;AAEA;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AA0BA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AAEA;AACA;AAEA;AAiBA;AAEA;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;AClEA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AAKA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AAEA;AAAA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1JA;AAIA;AAEA;AAEA;AAaA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;ACncA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAIA;AAcA;;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/EA;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAQA;AACA;AACA;AAEA;AAGA","sources":["webpack:///./components/common/capacity-card.scss?f2c4","webpack:///./components/common/line-graph.scss?92b2","webpack:///./components/performance-card.scss?8acb","webpack:///./components/common/capacity-card.scss","webpack:///./components/common/line-graph.scss","webpack:///./components/performance-card.scss","webpack:///./components/capacity-card.tsx","webpack:///./components/common/capacity-card.tsx","webpack:///./components/common/line-graph.tsx","webpack:///./components/common/poll-hook.tsx","webpack:///./components/common/ref-width.ts","webpack:///./components/common/safe-fetch-hook.ts","webpack:///./components/common/table.tsx","webpack:///./components/common/use-url-poll-hook.ts","webpack:///./components/dashboard.tsx","webpack:///./components/page-heading.tsx","webpack:///./components/performance-card.tsx","webpack:///./components/status-card.tsx","webpack:///./humanize.js","webpack:///./utils/constants.ts","webpack:///./utils/query-utils.ts","webpack:///./utils/query.ts","webpack:///./utils/types.tsx"],"sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./capacity-card.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./capacity-card.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./capacity-card.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./line-graph.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./line-graph.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./line-graph.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./performance-card.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./performance-card.scss\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ruleSet[1].rules[1].use[3]!../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[4]!../../node_modules/sass-loader/lib/loader.js??ruleSet[1].rules[1].use[5]!./performance-card.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"@keyframes loading-skeleton {\\n  0% {\\n    opacity: 0.15;\\n  }\\n\\n  25% {\\n    opacity: 0.65;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n.o-capacityCard {\\n  min-height: 215px;\\n  overflow-y: auto;\\n  padding-top: 5px;\\n}\\n\\n.o-capacityCard--centered {\\n  align-items: center;\\n  display: flex;\\n  flex: 1;\\n  place-content: center;\\n}\\n\\n.odf-capacityCardLoading-body {\\n  display: flex;\\n  flex-direction: column;\\n  height: 215px;\\n}\\n\\n.odf-capacityCardLink--ellipsis {\\n  display: block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  width: 50px;\\n}\\n\\n.odf-capacityCard--height {\\n  max-height: 286px;\\n}\\n\\n.odf-capacityCardLoading-body__item {\\n  display: flex;\\n  flex-direction: row;\\n  flex-grow: 1;\\n  justify-content: space-evenly;\\n}\\n\\n.odf-capacityCardLoading-body__item-item__element {\\n  animation: loading-skeleton 1s ease-out 0.15s infinite alternate;\\n  background: #eaedf1;\\n  display: flex;\\n  flex-grow: 1;\\n  height: 20px;\\n  margin: 5px;\\n  min-width: 50px;\\n}\\n\\n.odf-capacityCardLoading-body__item--header {\\n  height: 40px;\\n}\\n\\n.odf-capacityCardLoading-body__item--thin {\\n  width: 25px;\\n}\\n\\n.odf-capacityCardLoading-body__item--thin--thick {\\n  width: 80px;\\n}\\n\\n\", \"\", {\"version\":3,\"sources\":[\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/common/src/components/common/skeleton.scss\",\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/common/capacity-card.scss\",\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/common/src/components/common/capacity-card.scss\"],\"names\":[],\"mappings\":\"AAAA;EACI;IACE,cAAA;GCCH;;EDEC;IACE,cAAA;GCCH;;EDEC;IACE,WAAA;GCCH;CACF;;ACVD;EACE,kBAAA;EACA,iBAAA;EACA,iBAAA;CDaD;;ACXC;EACE,oBAAA;EACA,cAAA;EACA,QAAA;EACA,sBAAA;CDcH;;ACbE;EAKC,cAAA;EACA,uBAAA;EACA,cAAA;CDYH;;ACXE;EAGC,eAAA;EACA,iBAAA;EACA,wBAAA;EACA,oBAAA;EACA,YAAA;CDYH;;ACXE;EAGC,kBAAA;CDYH;;ACXE;EAID,cAAA;EACA,oBAAA;EACA,aAAA;EACA,8BAAA;CDWD;;ACTC;EACE,iEAAA;EACA,oBAAA;EACA,cAAA;EACA,aAAA;EACA,aAAA;EACA,YAAA;EACA,gBAAA;CDYH;;ACXE;EAID,aAAA;CDWD;;ACVA;EAGC,YAAA;CDWD;;ACVA;EAGC,YAAA;CDWD\",\"file\":\"capacity-card.scss\",\"sourcesContent\":[\"@keyframes loading-skeleton {\\n    0% {\\n      opacity: 0.15;\\n    }\\n  \\n    25% {\\n      opacity: 0.65;\\n    }\\n  \\n    100% {\\n      opacity: 1;\\n    }\\n  }\\n  \\n  $skeleton-animation: loading-skeleton 1s ease-out 0.15s infinite alternate;\\n  $skeleton-color: #eaedf1;\",\"@keyframes loading-skeleton {\\n  0% {\\n    opacity: 0.15;\\n  }\\n\\n  25% {\\n    opacity: 0.65;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n.o-capacityCard {\\n  min-height: 215px;\\n  overflow-y: auto;\\n  padding-top: 5px;\\n}\\n\\n.o-capacityCard--centered {\\n  align-items: center;\\n  display: flex;\\n  flex: 1;\\n  place-content: center;\\n}\\n\\n.odf-capacityCardLoading-body {\\n  display: flex;\\n  flex-direction: column;\\n  height: 215px;\\n}\\n\\n.odf-capacityCardLink--ellipsis {\\n  display: block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  width: 50px;\\n}\\n\\n.odf-capacityCard--height {\\n  max-height: 286px;\\n}\\n\\n.odf-capacityCardLoading-body__item {\\n  display: flex;\\n  flex-direction: row;\\n  flex-grow: 1;\\n  justify-content: space-evenly;\\n}\\n\\n.odf-capacityCardLoading-body__item-item__element {\\n  animation: loading-skeleton 1s ease-out 0.15s infinite alternate;\\n  background: #eaedf1;\\n  display: flex;\\n  flex-grow: 1;\\n  height: 20px;\\n  margin: 5px;\\n  min-width: 50px;\\n}\\n\\n.odf-capacityCardLoading-body__item--header {\\n  height: 40px;\\n}\\n\\n.odf-capacityCardLoading-body__item--thin {\\n  width: 25px;\\n}\\n\\n.odf-capacityCardLoading-body__item--thin--thick {\\n  width: 80px;\\n}\\n\\n\",\"@import './skeleton';\\n\\n.o-capacityCard {\\n  min-height: 215px;\\n  overflow-y: auto;\\n  padding-top: 5px;\\n\\n  &--centered {\\n    align-items: center;\\n    display: flex;\\n    flex: 1;\\n    place-content: center;\\n  }\\n}\\n\\n.odf {\\n  &-capacityCardLoading-body {\\n    display: flex;\\n    flex-direction: column;\\n    height: 215px;\\n  }\\n\\n  &-capacityCardLink--ellipsis {\\n    display: block;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    width: 50px;\\n  }\\n\\n  &-capacityCard--height {\\n    max-height: 286px;\\n  }\\n}\\n\\n.odf-capacityCardLoading-body__item {\\n  display: flex;\\n  flex-direction: row;\\n  flex-grow: 1;\\n  justify-content: space-evenly;\\n\\n  &-item__element {\\n    animation: $skeleton-animation;\\n    background: $skeleton-color;\\n    display: flex;\\n    flex-grow: 1;\\n    height: 20px;\\n    margin: 5px;\\n    min-width: 50px;\\n  }\\n}\\n\\n.odf-capacityCardLoading-body__item--header {\\n  height: 40px;\\n}\\n\\n.odf-capacityCardLoading-body__item--thin {\\n  width: 25px;\\n}\\n\\n.odf-capacityCardLoading-body__item--thin--thick {\\n  width: 80px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".odf-lineGraph {\\n  display: flex;\\n}\\n\\n.odf-valueBox {\\n  display: flex;\\n  flex-direction: column;\\n  place-content: center;\\n}\\n\\n\", \"\", {\"version\":3,\"sources\":[\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/common/src/components/common/line-graph.scss\",\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/common/line-graph.scss\"],\"names\":[],\"mappings\":\"AAAA;EACI,cAAA;CCCH;;ADAE;EAGC,cAAA;EACA,uBAAA;EACA,sBAAA;CCCH\",\"file\":\"line-graph.scss\",\"sourcesContent\":[\".odf-lineGraph {\\n    display: flex;\\n  }\\n  \\n  .odf-valueBox {\\n    display: flex;\\n    flex-direction: column;\\n    place-content: center;\\n  }\\n  \",\".odf-lineGraph {\\n  display: flex;\\n}\\n\\n.odf-valueBox {\\n  display: flex;\\n  flex-direction: column;\\n  place-content: center;\\n}\\n\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"@keyframes loading-skeleton {\\n  0% {\\n    opacity: 0.15;\\n  }\\n\\n  25% {\\n    opacity: 0.65;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n.performanceCard__header {\\n  padding: 15px !important;\\n}\\n\\n.performanceCard__header>h5 {\\n  margin-left: 5px !important;\\n}\\n\\n.performanceCard__row {\\n  padding-bottom: 15px !important;\\n  padding-left: 5px !important;\\n  padding-top: 15px !important;\\n}\\n\\n.performanceCard__border {\\n  border-bottom: 1px solid #d2d2d2 !important;\\n}\\n\\n.performanceCard--error {\\n  align-items: center;\\n  display: flex;\\n  min-height: 150px;\\n  place-content: center;\\n}\\n\\n.performanceCard--verticalAlign {\\n  vertical-align: middle !important;\\n}\\n\\n.odf-performanceCardLoading-body {\\n  display: flex;\\n  flex-direction: column;\\n  margin: 10px;\\n  min-height: 250px;\\n  overflow-x: hidden;\\n}\\n\\n.odf-performanceCardLoading-body__item {\\n  display: flex;\\n  flex-direction: row;\\n  flex-grow: 1;\\n  justify-content: space-evenly;\\n}\\n\\n.odf-performanceCardLoading-body-item__element {\\n  animation: loading-skeleton 1s ease-out 0.15s infinite alternate;\\n  background: #eaedf1;\\n  display: flex;\\n  flex-grow: 1;\\n  height: 80px;\\n  margin: 10px 20px;\\n  min-width: 150px;\\n}\\n\\n.odf-performanceCardLoading-body--header {\\n  height: 25px;\\n}\\n\\n.odf-performanceCardLoading-body-performanceCardError {\\n  align-items: center;\\n  display: flex;\\n  flex: 1;\\n  min-height: 150px;\\n  place-content: center;\\n}\\n\\n\", \"\", {\"version\":3,\"sources\":[\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/src/components/common/skeleton.scss\",\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/performance-card.scss\",\"/home/gshanmug/Documents/new_123/new/demo-pugin/src/components/src/components/performance-card.scss\"],\"names\":[],\"mappings\":\"AAAA;EACI;IACE,cAAA;GCCH;;EDEC;IACE,cAAA;GCCH;;EDEC;IACE,WAAA;GCCH;CACF;;ACTC;EACE,yBAAA;CDYH;;ACXE;EAGC,4BAAA;CDYH;;ACXE;EAGC,gCAAA;EACA,6BAAA;EACA,6BAAA;CDYH;;ACXE;EAGC,4CAAA;CDYH;;ACXE;EAGC,oBAAA;EACA,cAAA;EACA,kBAAA;EACA,sBAAA;CDYH;;ACXE;EAGC,kCAAA;CDYH;;ACXE;EAKC,cAAA;EACA,uBAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;CDUH;;ACTE;EAID,cAAA;EACA,oBAAA;EACA,aAAA;EACA,8BAAA;CDSD;;ACRA;EAGC,iEAAA;EACA,oBAAA;EACA,cAAA;EACA,aAAA;EACA,aAAA;EACA,kBAAA;EACA,iBAAA;CDSD;;ACRA;EAGC,aAAA;CDSD;;ACRA;EAGC,oBAAA;EACA,cAAA;EACA,QAAA;EACA,kBAAA;EACA,sBAAA;CDSD\",\"file\":\"performance-card.scss\",\"sourcesContent\":[\"@keyframes loading-skeleton {\\n    0% {\\n      opacity: 0.15;\\n    }\\n  \\n    25% {\\n      opacity: 0.65;\\n    }\\n  \\n    100% {\\n      opacity: 1;\\n    }\\n  }\\n  \\n  $skeleton-animation: loading-skeleton 1s ease-out 0.15s infinite alternate;\\n  $skeleton-color: #eaedf1;\",\"@keyframes loading-skeleton {\\n  0% {\\n    opacity: 0.15;\\n  }\\n\\n  25% {\\n    opacity: 0.65;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n.performanceCard__header {\\n  padding: 15px !important;\\n}\\n\\n.performanceCard__header>h5 {\\n  margin-left: 5px !important;\\n}\\n\\n.performanceCard__row {\\n  padding-bottom: 15px !important;\\n  padding-left: 5px !important;\\n  padding-top: 15px !important;\\n}\\n\\n.performanceCard__border {\\n  border-bottom: 1px solid #d2d2d2 !important;\\n}\\n\\n.performanceCard--error {\\n  align-items: center;\\n  display: flex;\\n  min-height: 150px;\\n  place-content: center;\\n}\\n\\n.performanceCard--verticalAlign {\\n  vertical-align: middle !important;\\n}\\n\\n.odf-performanceCardLoading-body {\\n  display: flex;\\n  flex-direction: column;\\n  margin: 10px;\\n  min-height: 250px;\\n  overflow-x: hidden;\\n}\\n\\n.odf-performanceCardLoading-body__item {\\n  display: flex;\\n  flex-direction: row;\\n  flex-grow: 1;\\n  justify-content: space-evenly;\\n}\\n\\n.odf-performanceCardLoading-body-item__element {\\n  animation: loading-skeleton 1s ease-out 0.15s infinite alternate;\\n  background: #eaedf1;\\n  display: flex;\\n  flex-grow: 1;\\n  height: 80px;\\n  margin: 10px 20px;\\n  min-width: 150px;\\n}\\n\\n.odf-performanceCardLoading-body--header {\\n  height: 25px;\\n}\\n\\n.odf-performanceCardLoading-body-performanceCardError {\\n  align-items: center;\\n  display: flex;\\n  flex: 1;\\n  min-height: 150px;\\n  place-content: center;\\n}\\n\\n\",\"@import './common/skeleton';\\n\\n.performanceCard {\\n  &__header {\\n    padding: 15px !important;\\n  }\\n\\n  &__header > h5 {\\n    margin-left: 5px !important;\\n  }\\n\\n  &__row {\\n    padding-bottom: 15px !important;\\n    padding-left: 5px !important;\\n    padding-top: 15px !important;\\n  }\\n\\n  &__border {\\n    border-bottom: 1px solid #d2d2d2 !important;\\n  }\\n\\n  &--error {\\n    align-items: center;\\n    display: flex;\\n    min-height: 150px;\\n    place-content: center;\\n  }\\n\\n  &--verticalAlign {\\n    vertical-align: middle !important;\\n  }\\n}\\n\\n.odf {\\n  &-performanceCardLoading-body {\\n    display: flex;\\n    flex-direction: column;\\n    margin: 10px;\\n    min-height: 250px;\\n    overflow-x: hidden;\\n  }\\n}\\n\\n.odf-performanceCardLoading-body__item {\\n  display: flex;\\n  flex-direction: row;\\n  flex-grow: 1;\\n  justify-content: space-evenly;\\n}\\n\\n.odf-performanceCardLoading-body-item__element {\\n  animation: $skeleton-animation;\\n  background: $skeleton-color;\\n  display: flex;\\n  flex-grow: 1;\\n  height: 80px;\\n  margin: 10px 20px;\\n  min-width: 150px;\\n}\\n\\n.odf-performanceCardLoading-body--header {\\n  height: 25px;\\n}\\n\\n.odf-performanceCardLoading-body-performanceCardError {\\n  align-items: center;\\n  display: flex;\\n  flex: 1;\\n  min-height: 150px;\\n  place-content: center;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n","import * as React from 'react';\nimport {\n  PrometheusResponse,\n  PrometheusResult,\n} from '@openshift-console/dynamic-plugin-sdk';\nimport { useURLPoll } from './common/use-url-poll-hook';\nimport {\n  DashboardCard,\n  DashboardCardBody,\n  DashboardCardHeader,\n  DashboardCardTitle,\n} from '@openshift-console/dynamic-plugin-sdk-internal';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { humanizeBinaryBytes } from '../humanize';\nimport { getAcmThanosEnpoint } from '../utils/query';\nimport { CapacityCard, CapacityMetricDatum } from './common/capacity-card';\n\n\nconst getMetricForSystem = (\n    metric: PrometheusResponse,\n    system: PrometheusResult\n) =>\n    metric?.data?.result?.find(\n      (value) => (value.metric.managedBy === system.metric.target_name) && (value.metric.cluster === system.metric.cluster)\n    );\n    \n  \nexport const SystemCapacityCard: React.FC = () => {\n    const { t } = useTranslation('plugin__odf-console');\n    const [systems, errorSystem, loadingsystem] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpoint()}?query=odf_system_map`);\n    const [usedCapacity, errorUsedCapacity, loadingUsedCapacity] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpoint()}?query=odf_system_raw_capacity_used_bytes`);\n    const [totalCapacity, errorTotalCapacity, loadingTotalCapacity] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpoint()}?query=odf_system_raw_capacity_total_bytes`);\n  \n    const data =\n      !loadingsystem && !loadingUsedCapacity && !loadingTotalCapacity\n        ? systems?.data?.result?.map<CapacityMetricDatum>((system) => {\n            const usedMetric = getMetricForSystem(usedCapacity, system);\n            const totalMetric = getMetricForSystem(totalCapacity, system);\n            const datum = {\n              name: system.metric.storage_system,\n              cluster: system.metric.cluster,\n              managedSystemName: system.metric.target_name,\n              managedSystemKind: system.metric.target_kind,\n              usedValue: humanizeBinaryBytes(usedMetric?.value?.[1]),\n              totalValue: humanizeBinaryBytes(totalMetric?.value?.[1]),\n            };\n            return datum;\n          })\n        : [];\n    const error =\n      !_.isEmpty(errorSystem) ||\n      !_.isEmpty(errorTotalCapacity) ||\n      !_.isEmpty(errorUsedCapacity);\n    const isLoading =\n      loadingUsedCapacity && loadingTotalCapacity && !errorSystem;\n    return (\n      <DashboardCard className=\"odf-capacityCard--height\">\n        <DashboardCardHeader>\n          <DashboardCardTitle>{t('System Capacity')}</DashboardCardTitle>\n        </DashboardCardHeader>\n        <DashboardCardBody>\n          {!error ? (\n            <CapacityCard data={data} isPercentage loading={isLoading} />\n          ) : (\n            <>{t('No data available')}</>\n          )}\n        </DashboardCardBody>\n      </DashboardCard>\n    );\n  };\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Grid,\n  GridItem,\n  Progress,\n  ProgressMeasureLocation,\n  ProgressVariant,\n  Title,\n  Tooltip,\n} from '@patternfly/react-core';\n\nimport { humanizeBinaryBytes } from '../../humanize';\nimport { HumanizeResult, DataUnavailableError } from '../../utils/types';\n\nimport './capacity-card.scss';\n\n\nexport type CapacityMetricDatum = {\n  name: string;\n  cluster: string;\n  managedSystemName?: string;\n  managedSystemKind?: string;\n  totalValue?: HumanizeResult;\n  usedValue: HumanizeResult;\n};\n\ntype CapacityCardProps = {\n  data: CapacityMetricDatum[];\n  relative?: boolean;\n  isPercentage?: boolean;\n  loading?: boolean;\n};\n\nconst getPercentage = (item: CapacityMetricDatum) =>\n  (humanizeBinaryBytes(\n    item.usedValue.value,\n    item.usedValue.unit,\n    item.totalValue.unit\n  ).value /\n    item.totalValue.value) *\n  100;\n\nconst sortMetrics = (\n  metrics: CapacityMetricDatum[],\n  direction: 'ASC' | 'DESC' = 'ASC',\n  relative = false\n): CapacityMetricDatum[] => {\n  metrics.sort((a, b) => {\n    let comparatorA = a.usedValue.value;\n    const comparatorB = humanizeBinaryBytes(\n      b.usedValue.value,\n      b.usedValue.unit,\n      a.usedValue.unit\n    ).value;\n    if (!relative) {\n      comparatorA = getPercentage(a);\n      comparatorA = getPercentage(b);\n    }\n    if (comparatorA < comparatorB) {\n      return direction === 'ASC' ? -1 : 1;\n    }\n    if (comparatorB > comparatorA) {\n      return direction === 'ASC' ? 1 : -1;\n    }\n    return 0;\n  });\n  return metrics;\n};\n\ntype CapacityCardHeaderProps = {\n  showPercentage: boolean;\n};\n\nconst CapacityCardHeader: React.FC<CapacityCardHeaderProps> = ({\n  showPercentage,\n}) => {\n  const { t } = useTranslation('plugin__odf-console');\n  return (\n    <>\n      <GridItem span={2}>\n        <Title headingLevel=\"h3\" size=\"md\">\n          {t('Name')}\n        </Title>\n      </GridItem>\n      <GridItem span={7}>\n        <Title headingLevel=\"h3\" size=\"md\">\n          {t('Used Capacity')} {showPercentage && <>%</>}\n        </Title>\n      </GridItem>\n      <GridItem span={3}>\n        <Title headingLevel=\"h3\" size=\"md\">\n          {t('Used / Total')}\n        </Title>\n      </GridItem>\n    </>\n  );\n};\n\ntype CapacityCardRowProps = {\n  data: CapacityMetricDatum;\n  isRelative?: boolean;\n  isPercentage?: boolean;\n  largestValue?: HumanizeResult;\n};\n\nexport const getProgress = (\n  data: CapacityMetricDatum,\n  isRelative: boolean,\n  largestValue: HumanizeResult\n) => {\n  if (isRelative) {\n    return (\n      (humanizeBinaryBytes(\n        data.usedValue.value,\n        data.usedValue.unit,\n        largestValue.unit\n      ).value /\n        largestValue.value) *\n      100\n    );\n  }\n  return getPercentage(data);\n};\n\nconst CapacityCardRow: React.FC<CapacityCardRowProps> = ({\n  data,\n  isPercentage,\n  isRelative,\n  largestValue,\n}) => {\n  const progress = getProgress(data, isRelative, largestValue);\n  const value = isPercentage\n    ? `${data.usedValue.string} / ${data.totalValue.string}`\n    : data.usedValue.string;\n  const variant = (() => {\n    if (!isPercentage) {\n      return null;\n    }\n    if (progress >= 80) {\n      return ProgressVariant.danger;\n    }\n    if (progress >= 75) {\n      return ProgressVariant.warning;\n    }\n  })();\n\n  const dataUnavailable = _.isNaN(progress);\n  return (\n    <>\n      <GridItem key={`${data.name}~name`} span={2}>\n          <>{`${data.cluster}: ${data.name}`}</>\n      </GridItem>\n      <GridItem key={`${data.name}~progress`} span={7}>\n        <Tooltip\n          content={!dataUnavailable ? <>{progress.toFixed(2)} %</> : '-'}\n        >\n          <Progress\n            value={dataUnavailable ? null : progress}\n            label={!dataUnavailable ? `${progress.toFixed(2)} %` : ''}\n            size=\"md\"\n            measureLocation={\n              !isPercentage\n                ? ProgressMeasureLocation.none\n                : ProgressMeasureLocation.outside\n            }\n            variant={variant}\n          />\n        </Tooltip>\n      </GridItem>\n      <GridItem span={3} key={`${data.name}~value`}>\n        {dataUnavailable ? '-' : value}\n      </GridItem>\n    </>\n  );\n};\n\nconst CapacityCardLoading: React.FC = () => (\n  <div className=\"odf-capacityCardLoading-body\">\n    <div className=\"odf-capacityCardLoading-body__item\">\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin odf-capacityCardLoading-body-item__element--header\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thick odf-capacityCardLoading-body-item__element--header\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin odf-capacityCardLoading-body-item__element--header\" />\n    </div>\n    <div className=\"odf-capacityCardLoading-body__item\">\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thick\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n    </div>\n    <div className=\"odf-capacityCardLoading-body__item\">\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thick\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n    </div>\n    <div className=\"odf-capacityCardLoading-body__item\">\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thick\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n    </div>\n    <div className=\"odf-capacityCardLoading-body__item\">\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thick\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n    </div>\n    <div className=\"odf-capacityCardLoading-body__item\">\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thick\" />\n      <div className=\"odf-capacityCardLoading-body-item__element odf-capacityCardLoading-body-item__element--thin\" />\n    </div>\n  </div>\n);\n\nexport const CapacityCard: React.FC<CapacityCardProps> = ({\n  data,\n  relative,\n  isPercentage = true,\n  loading,\n}) => {\n  let secureRelative = relative;\n  if (relative === undefined) {\n    secureRelative = data[0]?.totalValue === undefined;\n  }\n  const sortedMetrics = sortMetrics(data, 'ASC', secureRelative);\n  const error = _.isEmpty(sortedMetrics);\n  return (\n    <div\n      className={classNames('o-capacityCard', {\n        'o-capacityCard--centered': error,\n      })}\n    >\n      {!error && !loading && (\n        <Grid hasGutter>\n          <CapacityCardHeader showPercentage={isPercentage} />\n          {sortedMetrics.map((item) => (\n            <CapacityCardRow\n              key={item.name}\n              data={item}\n              isPercentage={isPercentage}\n              isRelative={relative}\n              largestValue={sortedMetrics[0].usedValue}\n            />\n          ))}\n        </Grid>\n      )}\n      {error && !loading && <DataUnavailableError />}\n      {loading && <CapacityCardLoading />}\n    </div>\n  );\n};\n\nexport default CapacityCard;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLine,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport { Title } from '@patternfly/react-core';\nimport useRefWidth from './ref-width';\nimport { HumanizeResult } from '../../utils/types';\nimport './line-graph.scss';\n\ntype LineDataType = {\n  y: HumanizeResult;\n  timestamp: Date;\n};\n\nexport type LineGraphProps = {\n  data: LineDataType[];\n  loading?: boolean;\n  error?: string;\n};\n\nconst LineGraph: React.FC<LineGraphProps> = ({ data }) => {\n  const { t } = useTranslation('plugin__odf-console');\n  const [ref, width] = useRefWidth();\n  const lineData = data.map((datum, i) => ({\n    x: String(i + 1),\n    ...datum,\n  }));\n  const mappedLineData = lineData.map((datum) => ({\n    ...datum,\n    y: datum.y.value,\n    yString: datum.y.string,\n  }));\n\n  const dataUnavailable = _.isEmpty(data);\n\n  const unit = !dataUnavailable ? lineData[0].y.unit : '';\n  const latestValue = !dataUnavailable\n    ? lineData[lineData.length - 1].y.string\n    : '';\n  return !dataUnavailable ? (\n    <div className=\"odf-lineGraph\">\n      <div\n        className=\"pf-u-display-none-on-md pf-u-display-inline-block-on-lg pf-u-w-95-lg\"\n        ref={ref}\n      >\n        <Chart\n          containerComponent={\n            <ChartVoronoiContainer\n              labels={({ datum }) =>\n                `${datum.yString} at ${datum.timestamp.toLocaleTimeString()}`\n              }\n              constrainToVisibleArea\n            />\n          }\n          height={150}\n          padding={{\n            bottom: 20,\n            left: 95,\n            right: 15, // Adjusted to accommodate legend\n            top: 20,\n          }}\n          width={width}\n        >\n          <ChartAxis\n            dependentAxis\n            showGrid\n            tickCount={2}\n            tickFormat={(tick, _index, _ticks) => {\n              return `${tick} ${unit}`;\n            }}\n          />\n          <ChartGroup>\n            <ChartLine data={mappedLineData} />\n          </ChartGroup>\n        </Chart>\n      </div>\n      <div className=\"pf-u-w-5-lg pf-u-w-100-md odf-valueBox\">\n        <div>\n          <Title headingLevel=\"h5\" size=\"md\">\n            {latestValue}\n          </Title>\n        </div>\n        <div>{t('Current')}</div>\n      </div>\n    </div>\n  ) : (\n    <>-</>\n  );\n};\n\nexport default LineGraph;\n","import { useEffect, useRef } from 'react';\n\n// Slightly modified from Dan Abramov's blog post about using React hooks for polling\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const usePoll = (callback, delay, ...dependencies) => {\n  const savedCallback = useRef(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current();\n\n    tick(); // Run first tick immediately.\n\n    if (delay) {\n      // Only start interval if a delay is provided.\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, ...dependencies]);\n};\n","import * as React from 'react';\n\nconst useRefWidth = () => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const [width, setWidth] = React.useState<number>();\n\n  const clientWidth = ref?.current?.clientWidth;\n\n  React.useEffect(() => {\n    const handleResize = () => setWidth(ref?.current?.clientWidth);\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('sidebar_toggle', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('sidebar_toggle', handleResize);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    setWidth(clientWidth);\n  }, [clientWidth]);\n\n  // eslint-disable-next-line no-undef\n  return [ref, width] as [React.MutableRefObject<HTMLDivElement>, number];\n};\n\nexport default useRefWidth;\n","import { useEffect, useRef } from 'react';\nimport { consoleFetchJSON} from '@openshift-console/dynamic-plugin-sdk';\n\nexport const useSafeFetch = () => {\n  const controller = useRef<AbortController>();\n  useEffect(() => {\n    controller.current = new AbortController();\n    return () => controller.current.abort();\n  }, []);\n\n  return (url) => consoleFetchJSON(url, 'get', { signal: controller.current.signal as AbortSignal });\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  OnSort,\n  SortByDirection,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\n\nexport type Column = {\n  columnName: string;\n  className?: string;\n  sortFunction?: (a: any, b: any, c: SortByDirection) => any;\n};\n\nexport type RowData = [];\n\ntype TableProps = {\n  columns: Column[];\n  rowRenderer: (rawData: []) => RowData[];\n  rawData: [];\n  ariaLabel: string;\n};\n\nconst Table: React.FC<TableProps> = (props) => {\n  const { ariaLabel, columns, rawData, rowRenderer } = props;\n  const [sortIndex, setSortIndex] = React.useState(-1);\n  const [sortDirection, setSortDirection] = React.useState<SortByDirection>(\n    SortByDirection.asc\n  );\n\n  const onSort: OnSort = (\n    event: React.MouseEvent,\n    columnIndex: number,\n    sortByDirection: SortByDirection\n  ) => {\n    setSortIndex(columnIndex);\n    setSortDirection(sortByDirection);\n  };\n\n  const sortedData =\n    sortIndex !== -1\n      ? rawData.sort((a, b) => {\n          return columns[sortIndex].sortFunction(a, b, sortDirection);\n        })\n      : rawData;\n\n  const rowData = sortedData?.length > 0 ? sortedData.map(rowRenderer) : [];\n\n  const classNames = columns.map((column) => column.className);\n\n  const headerColumns = columns.map((column, columnIndex) => {\n    const isSortable = !!column.sortFunction;\n    const sortParams = isSortable\n      ? {\n          sort: {\n            sortBy: {\n              index: sortIndex,\n              direction: sortDirection,\n            },\n            onSort,\n            columnIndex,\n          },\n        }\n      : {};\n    return (\n      <Th\n        key={columnIndex}\n        className={column.className}\n        {...sortParams}\n        translate={null}\n      >\n        {column.columnName}\n      </Th>\n    );\n  });\n\n  return (\n    <TableComposable aria-label={ariaLabel} translate={null}>\n      <Thead translate={null}>\n        <Tr translate={null}>{...headerColumns}</Tr>\n      </Thead>\n      <Tbody translate={null}>\n        {rowData?.map((row, index) => (\n          <Tr key={index} translate={null}>\n            {row.map((item, cellIndex) => (\n              <Td\n                translate={null}\n                key={`${cellIndex}_${index}`}\n                className={classNames[cellIndex]}\n              >\n                {item}\n              </Td>\n            ))}\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nexport default Table;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from 'react';\nimport { usePoll } from './poll-hook';\nimport { useSafeFetch } from './safe-fetch-hook';\n\nexport const URL_POLL_DEFAULT_DELAY = 15000; // 15 seconds\n\nexport const useURLPoll = <R>(\n  url: string,\n  delay = URL_POLL_DEFAULT_DELAY,\n  ...dependencies: any[]\n): URLPoll<R> => {\n  const [error, setError] = useState();\n  const [response, setResponse] = useState<R>();\n  const [loading, setLoading] = useState(true);\n  const safeFetch = useSafeFetch();\n  const tick = useCallback(() => {\n    if (url) {\n      safeFetch(url)\n        .then((data) => {\n          setResponse(data);\n          setError(undefined);\n          setLoading(false);\n        })\n        .catch((err) => {\n          if (err.name !== 'AbortError') {\n            setError(err);\n            setLoading(false);\n            // eslint-disable-next-line no-console\n            console.error(`Error polling URL: ${err}`);\n          }\n        });\n    } else {\n      setLoading(false);\n    }\n  }, [url]);\n\n  usePoll(tick, delay, ...dependencies);\n\n  return [response, error, loading];\n};\n\nexport type URLPoll<R> = [R, any, boolean];\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Helmet } from 'react-helmet';\nimport { RouteComponentProps } from 'react-router';\n\nimport { HorizontalNav } from '@openshift-console/dynamic-plugin-sdk';\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport { StatusCard } from './status-card';\nimport { SystemCapacityCard }  from './capacity-card';\nimport { PerformanceCard }  from './performance-card';\nimport PageHeading from './page-heading';\n\ntype ODFDashboardPageProps = {\n    history: RouteComponentProps['history'];\n  };\n\n  \nconst UpperSection: React.FC = () => (\n  <Grid hasGutter>\n    <GridItem md={4} sm={12}>\n      <StatusCard/>\n    </GridItem>\n    <GridItem md={8} sm={12}>\n      <SystemCapacityCard />\n    </GridItem>\n    <GridItem md={12} sm={12}>\n      <PerformanceCard />\n    </GridItem>\n  </Grid>\n);\n\nexport const ODFDashboard: React.FC = () => {\n  return (\n    <>\n      <div className=\"co-dashboard-body\">\n        <UpperSection />\n      </div>\n    </>\n  );\n};\n\nconst ODFDashboardPage: React.FC<ODFDashboardPageProps> = (props) => {\n  const { t } = useTranslation('plugin__console-demo');\n  const title = t('OpenShift Data Foundation');\n  const pages = [\n    {\n      href: '',\n      name: t('Overview'),\n      component: ODFDashboard,\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading />\n      <HorizontalNav\n        pages={pages}\n      />\n    </>\n  );\n};\n\nexport default ODFDashboardPage;\n","import * as React from 'react';\nimport * as _ from 'lodash';\n\nconst PageHeading: React.FC = (props) => {\n  return (\n      <h1 className=\"co-m-pane__heading\">\n        <div className=\"co-m-pane__name co-resource-item\">\n          <span className=\"co-m-pane__heading-badge\"> OpenShift Data Foundation </span>\n        </div>\n      </h1>\n  );\n};\n\nexport default PageHeading;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    PrometheusResponse\n  } from '@openshift-console/dynamic-plugin-sdk';\nimport {\n  DashboardCard,\n  DashboardCardHeader,\n  DashboardCardTitle,\n  UtilizationDurationDropdown,\n} from '@openshift-console/dynamic-plugin-sdk-internal';\n\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { useURLPoll } from './common/use-url-poll-hook';\nimport { DataUnavailableError } from '../utils/types';\nimport LineGraph, { LineGraphProps } from './common/line-graph';\nimport Table, { Column } from './common/table';\nimport './performance-card.scss';\nimport { generateDataFrames, getRangeVectorSearchParams } from '../utils/query-utils';\nimport { getAcmThanosEnpointQueryRange, getAcmThanosEnpoint } from '../utils/query';\n\ntype RowProps = {\n  systemName: string;\n  managedSystemKind: string;\n  managedSystemName: string;\n  currentLocation: string;\n  iopsData: LineGraphProps;\n  throughputData: LineGraphProps;\n  latencyData: LineGraphProps;\n  className?: string;\n};\n\ntype GetRow = (\n  args: RowProps\n) => [React.ReactNode, React.ReactNode, React.ReactNode, React.ReactNode];\n\nconst getRow: GetRow = ({\n  systemName,\n  iopsData,\n  throughputData,\n  latencyData,\n}) => {\n  return [\n    <>{systemName}</>,\n    <LineGraph key={`${systemName}_IOPS`} {...iopsData} />,\n\n    <LineGraph key={`${systemName}_LAT`} {...latencyData} />,\n\n    <LineGraph key={`${systemName}_THR`} {...throughputData} />,\n  ];\n};\n\n\nconst nameSort = (a: RowProps, b: RowProps, c: SortByDirection) => {\n  const negation = c !== SortByDirection.asc;\n  const sortVal = a.systemName.localeCompare(b.systemName);\n  return negation ? -sortVal : sortVal;\n};\n\nconst metricsSort =\n  (metric: 'iopsData' | 'throughputData' | 'latencyData') =>\n  (a: RowProps, b: RowProps, c: SortByDirection) => {\n    const negation = c !== SortByDirection.asc;\n    const dataA = a[metric]?.data;\n    const dataB = b[metric]?.data;\n    const sortVal =\n      dataA?.[dataA.length - 1]?.y?.value -\n        dataB?.[dataB.length - 1]?.y?.value || 0;\n    return negation ? -sortVal : sortVal;\n  };\n\nexport const PerformanceCard: React.FC = () => {\n  const { t } = useTranslation('plugin__odf-console');\n  const headerColumns: Column[] = [\n    {\n      columnName: t('Name'),\n      className: 'pf-u-w-10 performanceCard--verticalAlign',\n      sortFunction: nameSort,\n    },\n    {\n      columnName: t('IOPS'),\n      className: 'pf-u-w-30',\n      sortFunction: metricsSort('iopsData'),\n    },\n    {\n      columnName: t('Latency'),\n      className: 'pf-u-w-30',\n      sortFunction: metricsSort('latencyData'),\n    },\n    {\n      columnName: t('Throughput'),\n      className: 'pf-u-w-30',\n      sortFunction: metricsSort('throughputData'),\n    },\n  ];\n\n  const [systems, errorSystem, loadingsystem] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpoint()}?query=odf_system_map`);\n  const [latency, latencyError, latencyLoading] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpointQueryRange()}?query=odf_system_latency_seconds&${getRangeVectorSearchParams()}`);\n  const [throughput, throughputError, throughputLoading] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpointQueryRange()}?query=odf_system_throughput_total_bytes&${getRangeVectorSearchParams()}`);\n  const [iops, iopsError, iopsLoading] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpointQueryRange()}?query=odf_system_iops_total_bytes&${getRangeVectorSearchParams()}`);\n\n  const rawRows = generateDataFrames(systems, latency, throughput, iops);\n  const loading =\n    loadingsystem || latencyLoading || throughputLoading || iopsLoading;\n  const error =\n    !!errorSystem || !!throughputError || !!latencyError || !!iopsError;\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('Performance')}</DashboardCardTitle>\n        <UtilizationDurationDropdown />\n      </DashboardCardHeader>\n      {!error && !loading && (\n        <Table\n          columns={headerColumns}\n          rawData={rawRows as []}\n          rowRenderer={getRow as any}\n          ariaLabel={t('Performance Card')}\n        />\n      )}\n      {loading && !error && <PerformanceCardLoading />}\n      {((error && !loading) || (!error && !loading && _.isEmpty(rawRows))) && (\n        <div className=\"performanceCard--error\">\n          <DataUnavailableError />{' '}\n        </div>\n      )}\n    </DashboardCard>\n  );\n};\n\nexport default PerformanceCard;\n\nconst PerformanceCardLoading: React.FC = () => (\n  <div className=\"odf-performanceCardLoading-body\">\n    <div className=\"odf-performanceCardLoading-body__item\">\n      <div className=\"odf-performanceCardLoading-body-item__element odf-performanceCardLoading-body-item__element--header\" />\n      <div className=\"odf-performanceCardLoading-body-item__element odf-performanceCardLoading-body-item__element--header\" />\n      <div className=\"odf-performanceCardLoading-body-item__element odf-performanceCardLoading-body-item__element--header\" />\n      <div className=\"odf-performanceCardLoading-body-item__element odf-performanceCardLoading-body-item__element--header\" />\n    </div>\n    <div className=\"odf-performanceCardLoading-body__item\">\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n    </div>\n    <div className=\"odf-performanceCardLoading-body__item\">\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n      <div className=\"odf-performanceCardLoading-body-item__element\" />\n    </div>\n  </div>\n);\n","import * as React from 'react';\nimport * as _ from 'lodash';\n\n\nimport { useTranslation } from 'react-i18next';\n\nimport { Gallery, GalleryItem, pluralize } from '@patternfly/react-core';\n\nimport {\n    DashboardCard,\n    DashboardCardBody,\n    DashboardCardHeader,\n    DashboardCardTitle,\n    HealthBody,\n    HealthItem,\n} from '@openshift-console/dynamic-plugin-sdk-internal';\n\nimport {\n  PrometheusResponse,\n} from '@openshift-console/dynamic-plugin-sdk';\n\nimport { HealthState } from '../utils/constants';\nimport { getAcmThanosEnpoint } from '../utils/query';\nimport { useURLPoll } from './common/use-url-poll-hook';\n\n\nexport const StatusCard: React.FC = () => {\n  const { t } = useTranslation('plugin__console-demo');\n   const healthStateMap = (state: string) => {\n    switch (state) {\n      case '0':\n        return HealthState.OK;\n      case '1':\n        return HealthState.WARNING;\n      case '2':\n        return HealthState.ERROR;\n      default:\n        return HealthState.LOADING;\n    }\n  };\n\n  const [healthData, healthError, healthLoading] = useURLPoll<PrometheusResponse>(`${getAcmThanosEnpoint()}?query='(label_replace(odf_system_map{target_namespace=\"openshift-storage\"} , \"managedBy\", \"$1\", \"target_name\", \"(.*)\"))  * on (namespace, managedBy) group_right(storage_system) odf_system_health_status'`);\n\n  const parsedHealthData =\n  !healthError && !healthLoading\n    ? healthData.data.result.reduce((acc, curr) => {\n        const systemName = curr.metric.storage_system;\n        const systemData = {\n          systemName,\n          rawHealthData: curr.value[1],\n          healthState: healthStateMap(curr.value[1]),\n        };\n        return [...acc, systemData];\n      }, [])\n    : [];\n\nconst healthySystems = parsedHealthData.filter(\n  (item) => item.rawHealthData === '0'\n);\n\nconst unHealthySystems = parsedHealthData.filter(\n    (item) => item.rawHealthData !== '0'\n);\n\n\n  return (\n   <DashboardCard className=\"odfDashboard-card--height\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('Status')}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" hasGutter>\n            <GalleryItem>\n                <HealthItem\n                  title={pluralize(healthySystems.length, 'Storage System')}\n                  state={HealthState.OK}\n                >\n                </HealthItem>\n              </GalleryItem>\n              <GalleryItem>\n                <HealthItem\n                  title={pluralize(unHealthySystems.length, 'Storage System')}\n                  state={HealthState.ERROR}\n                >\n                </HealthItem>\n              </GalleryItem>\n          </Gallery>\n        </HealthBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n","import * as _ from 'lodash-es';\n\nexport const units = {};\nexport const validate = {};\n\nconst TYPES = {\n  numeric: {\n    units: ['', 'k', 'm', 'b'],\n    space: false,\n    divisor: 1000,\n  },\n  decimalBytes: {\n    units: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'],\n    space: true,\n    divisor: 1000,\n  },\n  decimalBytesWithoutB: {\n    units: ['', 'k', 'M', 'G', 'T', 'P', 'E'],\n    space: true,\n    divisor: 1000,\n  },\n  binaryBytes: {\n    units: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB'],\n    space: true,\n    divisor: 1024,\n  },\n  binaryBytesWithoutB: {\n    units: ['i', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei'],\n    space: true,\n    divisor: 1024,\n  },\n  SI: {\n    units: ['', 'k', 'M', 'G', 'T', 'P', 'E'],\n    space: false,\n    divisor: 1000,\n  },\n  decimalBytesPerSec: {\n    units: ['Bps', 'KBps', 'MBps', 'GBps', 'TBps', 'PBps', 'EBps'],\n    space: true,\n    divisor: 1000,\n  },\n  packetsPerSec: {\n    units: ['pps', 'kpps'],\n    space: true,\n    divisor: 1000,\n  },\n  seconds: {\n    units: ['ns', 'μs', 'ms', 's'],\n    space: true,\n    divisor: 1000,\n  },\n};\n\nexport const getType = (name) => {\n  const type = TYPES[name];\n  if (!_.isPlainObject(type)) {\n    return {\n      units: [],\n      space: false,\n      divisor: 1000,\n    };\n  }\n  return type;\n};\n\nconst convertBaseValueToUnits = (\n  value,\n  unitArray,\n  divisor,\n  initialUnit,\n  preferredUnit\n) => {\n  const sliceIndex = initialUnit ? unitArray.indexOf(initialUnit) : 0;\n  const units_ = unitArray.slice(sliceIndex);\n\n  if (preferredUnit || preferredUnit === '') {\n    const unitIndex = units_.indexOf(preferredUnit);\n    if (unitIndex !== -1) {\n      return {\n        value: value / divisor ** unitIndex,\n        unit: preferredUnit,\n      };\n    }\n  }\n\n  let unit = units_.shift();\n  while (value >= divisor && units_.length > 0) {\n    value = value / divisor;\n    unit = units_.shift();\n  }\n  return { value, unit };\n};\n\nconst convertValueWithUnitsToBaseValue = (value, unitArray, divisor) => {\n  const defaultReturn = { value, unit: '' };\n  if (typeof value !== 'string') {\n    return defaultReturn;\n  }\n\n  let units_ = unitArray.slice().reverse();\n\n  // find which unit we're given\n  let truncateStringAt = -1;\n  const startingUnitIndex = _.findIndex(units_, function (currentUnitValue) {\n    const index = value.indexOf(currentUnitValue);\n    if (index > -1) {\n      truncateStringAt = index;\n      return true;\n    }\n    return false;\n  });\n  if (startingUnitIndex <= 0) {\n    // can't parse\n    return defaultReturn;\n  }\n\n  // get the numeric value & prepare unit array for conversion\n  units_ = units_.slice(startingUnitIndex);\n  value = value.substring(0, truncateStringAt);\n  value = _.toNumber(value);\n\n  let unit = units_.shift();\n  while (units_.length > 0) {\n    value = value * divisor;\n    unit = units_.shift();\n  }\n\n  return { value, unit };\n};\n\nconst getDefaultFractionDigits = (value) => {\n  if (value < 1) {\n    return 3;\n  }\n  if (value < 100) {\n    return 2;\n  }\n  return 1;\n};\n\nconst formatValue = (value, options) => {\n  const fractionDigits = getDefaultFractionDigits(value);\n  const { locales, ...rest } = _.defaults(options, {\n    maximumFractionDigits: fractionDigits,\n  });\n\n  // 2nd check converts -0 to 0.\n  if (!isFinite(value) || value === 0) {\n    value = 0;\n  }\n  return Intl.NumberFormat(locales, rest).format(value);\n};\n\nconst round = (units.round = (value, fractionDigits) => {\n  if (!isFinite(value)) {\n    return 0;\n  }\n  const multiplier = Math.pow(\n    10,\n    fractionDigits || getDefaultFractionDigits(value)\n  );\n  return Math.round(value * multiplier) / multiplier;\n});\n\nconst humanize = (units.humanize = (\n  value,\n  typeName,\n  useRound = false,\n  initialUnit,\n  preferredUnit\n) => {\n  const type = getType(typeName);\n\n  if (!isFinite(value)) {\n    value = 0;\n  }\n\n  let converted = convertBaseValueToUnits(\n    value,\n    type.units,\n    type.divisor,\n    initialUnit,\n    preferredUnit\n  );\n\n  if (useRound) {\n    converted.value = round(converted.value);\n    converted = convertBaseValueToUnits(\n      converted.value,\n      type.units,\n      type.divisor,\n      converted.unit,\n      preferredUnit\n    );\n  }\n\n  const formattedValue = formatValue(converted.value);\n\n  return {\n    string: type.space\n      ? `${formattedValue} ${converted.unit}`\n      : formattedValue + converted.unit,\n    unit: converted.unit,\n    value: converted.value,\n  };\n});\n\nconst formatPercentage = (value, options) => {\n  const { locales, ...rest } = _.defaults(\n    { style: 'percent' }, // Don't allow perent style to be overridden.\n    options,\n    {\n      maximumFractionDigits: 1,\n    }\n  );\n  return Intl.NumberFormat(locales, rest).format(value);\n};\n\nexport const humanizeBinaryBytesWithoutB = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'binaryBytesWithoutB', true, initialUnit, preferredUnit);\nexport const humanizeBinaryBytes = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'binaryBytes', true, initialUnit, preferredUnit);\nexport const humanizeDecimalBytes = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'decimalBytes', true, initialUnit, preferredUnit);\nexport const humanizeDecimalBytesPerSec = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'decimalBytesPerSec', true, initialUnit, preferredUnit);\nexport const humanizePacketsPerSec = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'packetsPerSec', true, initialUnit, preferredUnit);\nexport const humanizeNumber = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'numeric', true, initialUnit, preferredUnit);\nexport const humanizeNumberSI = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'SI', true, initialUnit, preferredUnit);\nexport const humanizeSeconds = (v, initialUnit, preferredUnit) =>\n  humanize(v, 'seconds', true, initialUnit, preferredUnit);\nexport const humanizeCpuCores = (v) => {\n  const value = v < 1 ? round(v * 1000) : v;\n  const unit = v < 1 ? 'm' : '';\n  return {\n    string: `${formatValue(value)}${unit}`,\n    unit,\n    value,\n  };\n};\nexport const humanizePercentage = (value) => {\n  // 2nd check converts -0 to 0.\n  if (!isFinite(value) || value === 0) {\n    value = 0;\n  }\n  return {\n    string: formatPercentage(value / 100),\n    unit: '%',\n    value: round(value, 1),\n  };\n};\n\nunits.dehumanize = (value, typeName) => {\n  const type = getType(typeName);\n  return convertValueWithUnitsToBaseValue(value, type.units, type.divisor);\n};\n\nvalidate.split = (value) => {\n  const index = value.search(/([a-zA-Z]+)/g);\n  let number, unit;\n  if (index === -1) {\n    number = value;\n  } else {\n    number = value.slice(0, index);\n    unit = value.slice(index);\n  }\n  return [parseFloat(number, 10), unit];\n};\n\nconst baseUnitedValidation = (value) => {\n  if (value === null || value.length === 0) {\n    return;\n  }\n  if (value.search(/\\s/g) !== -1) {\n    return 'white space is not allowed';\n  }\n};\n\nconst validateNumber = (float = '') => {\n  if (float < 0) {\n    return 'must be positive';\n  }\n  if (!isFinite(float)) {\n    return 'must be a number';\n  }\n};\nconst validCPUUnits = new Set(['m', '']);\nconst validateCPUUnit = (value = '') => {\n  if (validCPUUnits.has(value)) {\n    return;\n  }\n  return `unrecongnized unit: ${value}`;\n};\n\nvalidate.CPU = (value = '') => {\n  if (!value) {\n    return;\n  }\n  const error = baseUnitedValidation(value);\n  if (error) {\n    return error;\n  }\n\n  const [number, unit] = validate.split(value);\n\n  if (!unit) {\n    return validateNumber(number);\n  }\n\n  return validateNumber(number) || validateCPUUnit(unit);\n};\n\nconst validMemUnits = new Set([\n  'E',\n  'P',\n  'T',\n  'G',\n  'M',\n  'k',\n  'Pi',\n  'Ti',\n  'Gi',\n  'Mi',\n  'Ki',\n]);\nconst validateMemUnit = (value = '') => {\n  if (validMemUnits.has(value)) {\n    return;\n  }\n  return `unrecongnized unit: ${value}`;\n};\n\nconst validTimeUnits = new Set(['s', 'm', 'h', 'd', 'M', 'y']);\nconst validateTimeUnit = (value = '') => {\n  if (validTimeUnits.has(value)) {\n    return;\n  }\n  return `unrecongnized unit: ${value}`;\n};\n\nvalidate.time = (value = '') => {\n  if (!value) {\n    return;\n  }\n  const error = baseUnitedValidation(value);\n  if (error) {\n    return error;\n  }\n\n  const [number, unit] = validate.split(value);\n\n  if (!unit) {\n    return 'number and unit required';\n  }\n\n  return validateNumber(number) || validateTimeUnit(unit);\n};\n\nvalidate.memory = (value = '') => {\n  if (!value) {\n    return;\n  }\n  const error = baseUnitedValidation(value);\n  if (error) {\n    return error;\n  }\n\n  const [number, unit] = validate.split(value);\n\n  if (!unit) {\n    return validateNumber(value);\n  }\n\n  return validateNumber(number) || validateMemUnit(unit);\n};\n\n// Convert k8s compute resources values to a base value for comparison.\n// If the value has no unit, it just returns the number, so this function\n// can be used for any quota resource (resource counts). `units.dehumanize`\n// is problematic for comparing quota resources because you need to know\n// what unit you're dealing with already (e.g. decimal vs binary). Returns\n// null if value isn't recognized as valid.\nexport const convertToBaseValue = (value) => {\n  if (!_.isString(value)) {\n    return null;\n  }\n\n  const [number, unit] = validate.split(value);\n  const validationError = validateNumber(number);\n  if (validationError) {\n    return null;\n  }\n\n  if (!unit) {\n    return number;\n  }\n\n  // Handle CPU millicores specifically.\n  if (unit === 'm') {\n    return number / 1000;\n  }\n\n  if (TYPES.binaryBytesWithoutB.units.includes(unit)) {\n    return units.dehumanize(value, 'binaryBytesWithoutB').value;\n  }\n\n  if (TYPES.decimalBytesWithoutB.units.includes(unit)) {\n    return units.dehumanize(value, 'decimalBytesWithoutB').value;\n  }\n\n  // Unrecognized unit.\n  return null;\n};\n\nexport const secondsToNanoSeconds = (value) => {\n  const val = Number(value);\n  return Number.isFinite(val) ? val * 1000 ** 3 : 0;\n};\n\nexport const formatToFractionalDigits = (value, digits) =>\n  Intl.NumberFormat(undefined, {\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits,\n  }).format(value);\n\nexport const formatBytesAsMiB = (bytes) => {\n  const mib = bytes / 1024 / 1024;\n  return formatToFractionalDigits(mib, 1);\n};\n\nexport const formatCores = (cores) => formatToFractionalDigits(cores, 3);\n\nexport const humanizeIOPS = (value) => {\n  const humanizedNumber = humanizeNumber(value);\n  return {\n    ...humanizedNumber,\n    string: `${humanizedNumber.string} IOPS`,\n    unit: `${humanizedNumber.unit} IOPS`,\n  };\n};\n\nexport const humanizeLatency = (value) => {\n  const humanizedTime = humanizeSeconds(\n    secondsToNanoSeconds(value),\n    null,\n    'ms'\n  );\n  return humanizedTime;\n};\n","export enum HealthState {\n    OK = 'OK',\n    ERROR = 'ERROR',\n    WARNING = 'WARNING',\n    LOADING = 'LOADING',\n    UNKNOWN = 'UNKNOWN',\n    UPDATING = 'UPDATING',\n    PROGRESS = 'PROGRESS',\n    NOT_AVAILABLE = 'NOT_AVAILABLE',\n};\n\nexport const ACM_THANOS_PROXY_ENDPOINT = \"/api/proxy/namespace/open-cluster-management-observability/service/rbac-query-proxy:8443\";\nexport const ACM_THANOS_QUERY_ENDPOINT = \"/api/v1/query\";\nexport const ACM_THANOS_QUERY_RANGE_ENDPOINT = \"/api/v1/query_range\";\n\nexport const ONE_SECOND = 1000;\nexport const ONE_MINUTE = 60 * ONE_SECOND;\nexport const ONE_HOUR = 60 * ONE_MINUTE;","import * as _ from \"lodash\";\nimport { ONE_HOUR } from './constants'\n\nimport { PrometheusResponse, PrometheusResult } from \"@openshift-console/dynamic-plugin-sdk\";\n\nimport { humanizeBinaryBytes, humanizeIOPS, humanizeLatency } from \"../humanize\";\nimport { LineGraphProps } from \"../components/common/line-graph\";\n\n\ntype DataFrame = {\n    systemName: string;\n    managedSystemKind: string;\n    managedSystemName: string;\n    currentLocation: string;\n    iopsData: LineGraphProps;\n    throughputData: LineGraphProps;\n    latencyData: LineGraphProps;\n    className?: string;\n};\nconst getDatForSystem = (\n    promData: PrometheusResponse,\n    system: PrometheusResult,\n    humanizer: Function\n) => {\n    const systemName = system.metric.target_name;\n    const relatedMetrics = promData?.data?.result?.find(\n        (value) => (value.metric.managedBy === systemName) && (value.metric.cluster === system.metric.cluster)\n    );\n    const metrics = relatedMetrics?.values?.map((value) => ({\n        timestamp: new Date(value[0] * 1000),\n        y: humanizer(value[1]),\n    }))\n    return (\n        metrics || []\n    );\n};\n\nexport const generateDataFrames = (\n    systems: PrometheusResponse,\n    ld: PrometheusResponse,\n    td: PrometheusResponse,\n    id: PrometheusResponse\n): DataFrame[] => {\n    if (_.isEmpty(systems) || !ld || !td || !id) {\n        return [] as DataFrame[];\n    }\n    return systems.data?.result.reduce<DataFrame[]>((acc, curr) => {\n        const frame: DataFrame = {\n            managedSystemKind: curr.metric.target_kind,\n            managedSystemName: curr.metric.target_name,\n            systemName: `${curr.metric.cluster}: ${curr.metric.storage_system}`,\n            currentLocation: '/',\n            iopsData: {\n                data: getDatForSystem(id, curr, humanizeIOPS),\n            },\n            throughputData: {\n                data: getDatForSystem(td, curr, humanizeBinaryBytes),\n            },\n            latencyData: {\n                data: getDatForSystem(ld, curr, humanizeLatency),\n            },\n        };\n        acc.push(frame);\n        return acc;\n    }, []);\n};\n\n\n// Range vector queries require end, start, and step search params\nexport const getRangeVectorSearchParams = (\n    endTime: number = Date.now(),\n    samples: number = 60,\n    timespan: number = ONE_HOUR,\n  ): URLSearchParams => {\n    const params = new URLSearchParams();\n    params.append('start', `${(endTime - timespan) / 1000}`);\n    params.append('end', `${endTime / 1000}`);\n    params.append('step', `${timespan / samples / 1000}`);\n    return params;\n  };","import { ACM_THANOS_PROXY_ENDPOINT, ACM_THANOS_QUERY_ENDPOINT, ACM_THANOS_QUERY_RANGE_ENDPOINT } from './constants';\n\nexport const getAcmThanosEnpoint = () => (\n    `${ACM_THANOS_PROXY_ENDPOINT}${ACM_THANOS_QUERY_ENDPOINT}`\n);\n\nexport const getAcmThanosEnpointQueryRange = () => (\n    `${ACM_THANOS_PROXY_ENDPOINT}${ACM_THANOS_QUERY_RANGE_ENDPOINT}`\n);","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport type HumanizeResult = {\n    value: number;\n    unit: string;\n    string: string;\n};\n\nexport const DataUnavailableError: React.FC = () => {\n    const { t } = useTranslation('plugin__console-demo');\n    return (\n      <div className=\"centerComponent\">\n        <div className=\"text-muted\">{t('No data available')}</div>\n      </div>\n    );\n  };\n\n"],"names":[],"sourceRoot":""}