{"version":3,"file":"components_ExampleProxyPage_tsx-chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AASA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA","sources":["webpack:///./components/ExampleProxyPage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { consoleFetchJSON } from '@openshift-console/dynamic-plugin-sdk';\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Page,\n  PageSection,\n  Title,\n} from \"@patternfly/react-core\";\n\nconst ExampleProxyPage: React.FC = () => {\n  const { t } = useTranslation(\"plugin__console-demo\");\n  return (\n    <Page\n      additionalGroupedContent={\n        <PageSection variant=\"light\">\n          <Title headingLevel=\"h1\">\n            {t(\"Dynamic Plugin Proxy Services example\")}\n          </Title>\n        </PageSection>\n      }\n    >\n      <PageSection>\n        <Card>\n          <CardTitle>{t(\"Proxy: consoleFetchJSON\")}</CardTitle>\n          <CardBody>\n          <ExampleProxyResponse />\n          </CardBody>\n        </Card>\n        <Card>\n          <CardTitle>{t(\"Proxy: consoleFetchJSON\")}</CardTitle>\n          <CardBody>\n          <ExampleProxyResponseNew />\n          </CardBody>\n        </Card>\n      </PageSection>\n    </Page>\n  );\n};\n\nconst ExampleProxyResponse: React.FC = () => {\n  const [data, setData] = React.useState();\n\n  React.useEffect(() => {\n    consoleFetchJSON('/api/proxy/namespace/openshift-monitoring/service/thanos-querier:9091/api/v1/rules')\n      .then((response) => {\n        setData(response);\n      })\n      .catch((e) => console.error(e));\n  }, []);\n\n  return (\n    <pre>{JSON.stringify(data, null, 2)}</pre>\n  );\n};\n\nconst ExampleProxyResponseNew: React.FC = () => {\n  const [data, setData] = React.useState();\n\n  React.useEffect(() => {\n    consoleFetchJSON('/api/proxy/namespace/open-cluster-management-observability/service/rbac-query-proxy:8443/api/v1/rules')\n      .then((response) => {\n        setData(response);\n      })\n      .catch((e) => console.error(e));\n  }, []);\n\n  return (\n    <pre>{JSON.stringify(data, null, 2)}</pre>\n  );\n};\n\nexport default ExampleProxyPage;\n"],"names":[],"sourceRoot":""}