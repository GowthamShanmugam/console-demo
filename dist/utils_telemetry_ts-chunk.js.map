{"version":3,"file":"utils_telemetry_ts-chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./utils/telemetry.ts"],"sourcesContent":["const SEGMENT_KEY = '';\n\nconst initSegment = () => {\n  const analytics = ((window as any).analytics = (window as any).analytics || []);\n  if (analytics.initialize) {\n    return;\n  }\n  if (analytics.invoked)\n    window.console && console.error && console.error('Segment snippet included twice.');\n  else {\n    analytics.invoked = true;\n    analytics.methods = [\n      'trackSubmit',\n      'trackClick',\n      'trackLink',\n      'trackForm',\n      'pageview',\n      'identify',\n      'reset',\n      'group',\n      'track',\n      'ready',\n      'alias',\n      'debug',\n      'page',\n      'once',\n      'off',\n      'on',\n      'addSourceMiddleware',\n      'addIntegrationMiddleware',\n      'setAnonymousId',\n      'addDestinationMiddleware',\n    ];\n    analytics.factory = function(e: string) {\n      return function() {\n        let t = Array.prototype.slice.call(arguments);\n        t.unshift(e);\n        analytics.push(t);\n        return analytics;\n      };\n    };\n    for (let e = 0; e < analytics.methods.length; e++) {\n      let key = analytics.methods[e];\n      analytics[key] = analytics.factory(key);\n    }\n    analytics.load = function(key: string, e: Event) {\n      const t = document.createElement('script');\n      t.type = 'text/javascript';\n      t.async = true;\n      t.src = 'https://cdn.segment.com/analytics.js/v1/' + encodeURIComponent(key) + '/analytics.min.js';\n      const n = document.getElementsByTagName('script')[0];\n      if (n.parentNode) {\n        n.parentNode.insertBefore(t, n);\n      }\n      analytics._loadOptions = e;\n    };\n    analytics.SNIPPET_VERSION = '4.13.1';\n    if (SEGMENT_KEY) {\n      analytics.load(SEGMENT_KEY);\n    }\n  }\n};\n\ninitSegment();\n\nexport const eventListener = async (eventType: string, properties?: any) => {\n  // eslint-disable-next-line no-console\n  console.log('Demo Plugin received telemetry event: ', eventType, properties);\n  const anonymousIP = {\n    context: {\n      ip: '0.0.0.0',\n    },\n  };\n  switch (eventType) {\n    case 'identify':\n      const { user, ...otherProperties } = properties;\n      const id = user.metadata.uid || `${location.host}-${user.metadata.name}`;\n      // Use SHA1 hash algorithm to anonymize the user\n      const anonymousIdBuffer = await crypto.subtle.digest('SHA-1', new TextEncoder().encode(id));\n      const anonymousIdArray = Array.from(new Uint8Array(anonymousIdBuffer));\n      const anonymousId = anonymousIdArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n      (window as any).analytics.identify(anonymousId, otherProperties, anonymousIP);\n      break;\n    case 'page':\n      (window as any).analytics.page(undefined, properties, anonymousIP);\n      break;\n    default:\n      (window as any).analytics.track(eventType, properties, anonymousIP);\n  }\n};\n"],"names":[],"sourceRoot":""}